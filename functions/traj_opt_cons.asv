% Evaluates nonlinear constraints for trajectory optimization
%  x - trajectory parameter choice
%  A_con - cell array of A matrix constraints
%  b_con - 

function [c, ceq, gc, gceq] = traj_opt_cons(x, A_con, b_con)
    epsilon = 1e-6 ;
    ceq = [];
    gceq = [] ;
    
    lambdas = (x - c_k)./g_k; % given a parameter, get coefficients on k_slc_G generators
    for k = 2:length(A_con) % ============ since initial set is not sliceable w.r.t. inputs
        c_tmp = A_con{k}*lambdas - b_con{k}; % A*lambda - b <= 0 means inside unsafe set
        c_tmp = max(c_tmp); % max of this <= 0 means inside unsafe set
        c = min(c, c_tmp); % take smallest max. if it's <=0, then unsafe
        if c == c_tmp
            k_min = k;
        end
    end
    
%     c1 = sum(x.^2) - v_max.^2 ;
%     
%     c2 = sum(((x - v_0)./t_peak).^2) - a_max.^2 ;

    c = A_con*x + b_con;
    %c = reshape(c, 4, []); % not needed for single obstacle case
    [c,i] = min(c, [], 1) ;
    c = c + epsilon ;
    
    c = c(:);
    
    A = A_con(1:6,:) ;
    
%     gc = [2.*x, (2.*(x-v_0)./t_peak^2), A(i3,:)'] ;
    gc = A(i,:)' ;
end